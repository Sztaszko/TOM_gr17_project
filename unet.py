# -*- coding: utf-8 -*-
"""Unet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1frDyd_zVjNXEjh_Bmrt6-JhZqMEkZcch
"""

"""
@author: Sztaszko
"""
from tensorflow.keras.layers import Input, Conv2D, Dropout, MaxPooling2D, concatenate, Conv2DTranspose
import tensorflow as tf


#build the model
def build_model(inputs):

  #---------contraction path----------
  #convolutional layers
  #Conv2D(filters, seed, activation, kernel_init)(in)  
  #he_normal - normal distribution (centered on 0)
  #padding = same - output img has the same dimentions
  #in have to be float
  c1 = Conv2D(16,(3,3),activation='relu', kernel_initializer='he_normal', padding='same')(inputs)
  c1 = Dropout(0.1)(c1)
  c1 = Conv2D(16,(3,3),activation='relu', kernel_initializer='he_normal', padding='same')(c1)
  p1 = MaxPooling2D((2,2))(c1) 

  c2 = Conv2D(32,(3,3),activation='relu', kernel_initializer='he_normal', padding='same')(p1)
  c2 = Dropout(0.1)(c2)
  c2 = Conv2D(32,(3,3),activation='relu', kernel_initializer='he_normal', padding='same')(c2)
  p2 = MaxPooling2D((2,2))(c2) 


  c3 = Conv2D(64,(3,3),activation='relu', kernel_initializer='he_normal', padding='same')(p2)
  c3 = Dropout(0.2)(c3)
  c3 = Conv2D(64,(3,3),activation='relu', kernel_initializer='he_normal', padding='same')(c3)
  p3 = MaxPooling2D((2,2))(c3) 

  c4 = Conv2D(128,(3,3),activation='relu', kernel_initializer='he_normal', padding='same')(p3)
  c4  = Dropout(0.2)(c4)
  c4 = Conv2D(128,(3,3),activation='relu', kernel_initializer='he_normal', padding='same')(c4)
  p4 = MaxPooling2D((2,2))(c4) 

  c5 = Conv2D(256,(3,3),activation='relu', kernel_initializer='he_normal', padding='same')(p4)
  c5  = Dropout(0.3)(c5)
  c5 = Conv2D(256,(3,3),activation='relu', kernel_initializer='he_normal', padding='same')(c5)
  p5 = MaxPooling2D((2,2))(c5) 

  #---------expansive path----------
  u6 = Conv2DTranspose(128, (2,2), strides=(2,2), padding='same')(c5)
  u6 = concatenate([u6,c4])
  c6 = Conv2D(128,(3,3),activation='relu', kernel_initializer='he_normal', padding='same')(u6)
  c6 = Dropout(0.2)(c6)
  c6 = Conv2D(128,(3,3),activation='relu', kernel_initializer='he_normal', padding='same')(c6)


  u7 = Conv2DTranspose(64, (2,2), strides=(2,2), padding='same')(c6)
  u7 = concatenate([u7,c3])
  c7 = Conv2D(64,(3,3),activation='relu', kernel_initializer='he_normal', padding='same')(u7)
  c7 = Dropout(0.2)(c7)
  c7 = Conv2D(64,(3,3),activation='relu', kernel_initializer='he_normal', padding='same')(c7)



  u8 = Conv2DTranspose(32, (2,2), strides=(2,2), padding='same')(c7)
  u8 = concatenate([u8,c2])
  c8 = Conv2D(32,(3,3),activation='relu', kernel_initializer='he_normal', padding='same')(u8)
  c8 = Dropout(0.1)(c8)
  c8 = Conv2D(32,(3,3),activation='relu', kernel_initializer='he_normal', padding='same')(c8)



  u9 = Conv2DTranspose(16, (2,2), strides=(2,2), padding='same')(c8)
  u9 = concatenate([u9,c1], axis=3)
  c9 = Conv2D(16,(3,3),activation='relu', kernel_initializer='he_normal', padding='same')(u9)
  c9 = Dropout(0.1)(c9)
  c9 = Conv2D(16,(3,3),activation='relu', kernel_initializer='he_normal', padding='same')(c9)

  outputs = Conv2D(1,(1,1), activation='sigmoid')(c9)
  return outputs


#coef for validation
from keras import backend as K

def dice_coef(y_true, y_pred):
  y_true_f=K.flatten(y_true)
  y_pred_f=K.flatten(y_pred)
  intersection=K.sum(y_true_f*y_pred_f)
  return (2.*intersection+1.)/(K.sum(y_true_f)+K.sum(y_pred_f)+1)

def dice_coef_loss(y_true, y_pred):
  return 1-dice_coef(y_true, y_pred)





"""
inputs = Input((IMG_WIDTH,IMG_HEIGHT,IMG_CHANNELS))
inputs_float=tf.keras.layers.Lambda(lambda x: x/255)(inputs)
outputs=build_model(inputs_float)
model = tf.keras.Model(inputs=[inputs], outputs=[outputs])

model.compile(optimizer='adam', loss=dice_coef_loss, metrics=['dice_coef'])
model.summary()

#adding checkpoints
checkpointer=tf.keras.callbacks.ModelCheckpoint('/tmp/model1.h5', verbose=1, save_best_only=True)

callbacks=[tf.keras.callbacks.EarlyStopping(patience=3, monitor='val_loss'),
           tf.keras.callbacks.TensorBoard(log_dir='/tmp/logs')]

results=model.fit(X,Y, validation_split=0.1, batch_size=16, epochs=25, callbacks=callbacks)

"""